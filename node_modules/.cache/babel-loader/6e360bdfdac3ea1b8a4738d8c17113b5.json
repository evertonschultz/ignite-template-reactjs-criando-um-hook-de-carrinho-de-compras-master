{"ast":null,"code":"var _jsxFileName = \"/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // const storagedCart = Buscar dados do localStorage\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      // TODO\n      const response = await api.get(`/products/${productId}`);\n      console.log(response.data);\n      const productInCart = cart.find(item => item.id === productId);\n\n      if (productInCart) {\n        const amount = productInCart.amount + 1;\n        updateProductAmount({\n          productId,\n          amount\n        });\n      } else {\n        response.data.amount = 1;\n        setCart(oldState => [...oldState, response.data]);\n      }\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    console.log({\n      productId,\n      amount\n    });\n\n    try {\n      // TODO\n      const response = await api.get(`/stock`);\n      const stock = response.data;\n      const stockByProduct = stock.find(item => item.id === productId);\n\n      if (stockByProduct === null || stockByProduct === void 0 ? void 0 : stockByProduct.id) {\n        const updateValited = stockByProduct.amount - amount < 0 ? false : true;\n\n        if (updateValited) {\n          const updatedCart = cart.map(item => item.id === productId ? { ...item,\n            amount: amount\n          } : item);\n          setCart(updatedCart);\n        }\n      }\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"YtbuN1V+lyXswE7SGXU88jdf5dY=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","addProduct","productId","response","get","console","log","data","productInCart","find","item","id","amount","updateProductAmount","oldState","removeProduct","stock","stockByProduct","updateValited","updatedCart","map","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD;AAEA;AACA;AACA;AAEA,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMO,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAE9C,QAAI;AACF;AACA,YAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAS,aAAYF,SAAU,EAA/B,CAAvB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AAEA,YAAMC,aAAa,GAAGT,IAAI,CAACU,IAAL,CAAUC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,SAA9B,CAAtB;;AAEA,UAAGM,aAAH,EAAkB;AAChB,cAAMI,MAAM,GAAGJ,aAAa,CAACI,MAAd,GAAuB,CAAtC;AACAC,QAAAA,mBAAmB,CAAC;AAACX,UAAAA,SAAD;AAAYU,UAAAA;AAAZ,SAAD,CAAnB;AACD,OAHD,MAGO;AACLT,QAAAA,QAAQ,CAACI,IAAT,CAAcK,MAAd,GAAuB,CAAvB;AACAZ,QAAAA,OAAO,CAACc,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcX,QAAQ,CAACI,IAAvB,CAAb,CAAP;AACD;AACF,KAdD,CAcE,MAAM,CACN;AACD;AACF,GAnBD;;AAqBA,QAAMQ,aAAa,GAAIb,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMW,mBAAmB,GAAG,OAAO;AACjCX,IAAAA,SADiC;AAEjCU,IAAAA;AAFiC,GAAP,KAGD;AACzBP,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,MAAAA,SAAD;AAAYU,MAAAA;AAAZ,KAAZ;;AACA,QAAI;AACF;AACA,YAAMT,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAS,QAAT,CAAvB;AACA,YAAMY,KAAc,GAAGb,QAAQ,CAACI,IAAhC;AACA,YAAMU,cAAc,GAAGD,KAAK,CAACP,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,SAA/B,CAAvB;;AAEA,UAAGe,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEN,EAAnB,EAAuB;AACrB,cAAMO,aAAa,GAAGD,cAAc,CAACL,MAAf,GAAwBA,MAAxB,GAAiC,CAAjC,GAAqC,KAArC,GAA6C,IAAnE;;AACA,YAAIM,aAAJ,EAAmB;AACjB,gBAAMC,WAAW,GAAGpB,IAAI,CAACqB,GAAL,CAASV,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,SAAZ,GAAwB,EAC3D,GAAGQ,IADwD;AAClDE,YAAAA,MAAM,EAAEA;AAD0C,WAAxB,GAEjCF,IAFgB,CAApB;AAIAV,UAAAA,OAAO,CAACmB,WAAD,CAAP;AACD;AACF;AACF,KAhBD,CAgBE,MAAM,CACN;AACD;AACF,GAxBD;;AA0BA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEpB,MAAAA,IAAF;AAAQE,MAAAA,UAAR;AAAoBc,MAAAA,aAApB;AAAmCF,MAAAA;AAAnC,KADT;AAAA,cAGGf;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAzEeD,Y;;KAAAA,Y;AA2EhB,OAAO,SAASwB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAG7B,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAO0B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    // const storagedCart = Buscar dados do localStorage\n\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    \n    try {\n      // TODO\n      const response = await api.get(`/products/${productId}`);\n      console.log(response.data);\n\n      const productInCart = cart.find(item => item.id === productId);\n\n      if(productInCart) {\n        const amount = productInCart.amount + 1;\n        updateProductAmount({productId, amount});\n      } else {\n        response.data.amount = 1;\n        setCart(oldState => [...oldState, response.data])\n      }\n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    console.log({productId, amount});\n    try {\n      // TODO\n      const response = await api.get(`/stock`);\n      const stock: Stock[] = response.data;\n      const stockByProduct = stock.find(item => item.id === productId);\n\n      if(stockByProduct?.id) {\n        const updateValited = stockByProduct.amount - amount < 0 ? false : true;\n        if (updateValited) {\n          const updatedCart = cart.map(item => item.id === productId ? {\n            ...item, amount: amount\n          } : item);\n    \n          setCart(updatedCart);\n        }\n      }\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}