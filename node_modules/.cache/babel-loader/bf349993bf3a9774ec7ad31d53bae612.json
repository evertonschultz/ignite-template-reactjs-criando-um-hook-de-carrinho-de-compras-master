{"ast":null,"code":"var _jsxFileName = \"/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      // TODO\n      const productInCart = cart.find(item => item.id === productId);\n      const responseStock = await api.get(`/stock/${productId}`);\n      const stockAmount = responseStock.data.amount;\n      const productInCartAmount = productInCart ? productInCart.amount : 0;\n      const amount = productInCartAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if (productInCart) {\n        updateProductAmount({\n          productId,\n          amount\n        });\n      } else {\n        const responseProduct = await api.get(`/products/${productId}`);\n        responseProduct.data.amount = amount;\n        setCart(oldState => [...oldState, responseProduct.data]);\n      }\n\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n    } catch (err) {\n      // TODO\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      // TODO\n      const findProductInCart = cart.find(item => item.id === productId);\n\n      if (findProductInCart) {\n        const removeProducInCart = cart.filter(item => item.id !== productId);\n        setCart(removeProducInCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n      }\n    } catch {\n      // TODO\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      // TODO\n      const responseStock = await api.get(`/stock/${productId}`);\n      const stockAmount = responseStock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      const updatedCart = cart.map(item => item.id === productId ? { ...item,\n        amount: amount\n      } : item);\n      setCart(updatedCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n    } catch (err) {\n      // TODO\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"QJ1iMSCfV9uRAaJVnByGClt+s/w=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","productInCart","find","item","id","responseStock","get","stockAmount","data","amount","productInCartAmount","error","updateProductAmount","responseProduct","oldState","setItem","stringify","err","removeProduct","findProductInCart","removeProducInCart","filter","updatedCart","map","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n  const storagedCart = localStorage.getItem('@RocketShoes:cart')\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      // TODO\n      const productInCart = cart.find(item => item.id === productId);\n\n      const responseStock = await api.get(`/stock/${productId}`);\n\n      const stockAmount = responseStock.data.amount;\n      const productInCartAmount = productInCart ? productInCart.amount : 0;\n      const amount = productInCartAmount + 1;\n\n      if(amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      if(productInCart) {\n        updateProductAmount({productId, amount});\n      } else {\n        const responseProduct = await api.get(`/products/${productId}`);\n        \n        responseProduct.data.amount = amount;\n\n        setCart(oldState => [...oldState, responseProduct.data])\n      }\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n    } catch (err) {\n      // TODO\n      toast.error('Erro na adição do produto');\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n      const findProductInCart = cart.find(item => item.id === productId);\n\n      if(findProductInCart) {\n        const removeProducInCart = cart.filter(item => item.id !== productId);\n        \n        setCart(removeProducInCart);\n        localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n      }\n    } catch {\n      // TODO\n      toast.error('Erro na remoção do produto');\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n      const responseStock = await api.get(`/stock/${productId}`);\n\n      const stockAmount = responseStock.data.amount;\n\n      if(amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque');\n        return;\n      }\n\n      const updatedCart = cart.map(item => item.id === productId ? {\n        ...item, amount: amount\n      } : item);\n    \n      setCart(updatedCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(cart));\n    } catch (err) {\n      // TODO\n      toast.error('Erro na alteração de quantidade do produto');\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}