{"ast":null,"code":"var _jsxFileName = \"/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // const storagedCart = Buscar dados do localStorage\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      // TODO\n      const response = await api.get(`/products/${productId}`);\n      const amount = response.data.amount + 1;\n      const productInCart = cart.find(item => item.id === productId);\n\n      if (productInCart) {\n        updateProductAmount({\n          productId,\n          amount\n        });\n      } else {\n        response.data.amount = amount;\n        setCart(oldState => [...oldState, response.data]);\n      }\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      // TODO\n      const stock = await api.get(`/stock`);\n      const stockByProduct = stock.find(item => item.id === productId);\n\n      if (stockByProduct === null || stockByProduct === void 0 ? void 0 : stockByProduct.id) {\n        const updateValited = stockByProduct.amount - amount < 0 ? false : true;\n\n        if (updateValited) {\n          const updatedCart = cart.map(item => item.id === productId ? { ...item,\n            amount: amount\n          } : item);\n          setCart(updatedCart);\n        }\n      }\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"YtbuN1V+lyXswE7SGXU88jdf5dY=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","addProduct","productId","response","get","amount","data","productInCart","find","item","id","updateProductAmount","oldState","removeProduct","stock","stockByProduct","updateValited","updatedCart","map","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD;AAEA;AACA;AACA;AAEA,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMO,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAE9C,QAAI;AACF;AACA,YAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAS,aAAYF,SAAU,EAA/B,CAAvB;AACA,YAAMG,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcD,MAAd,GAAuB,CAAtC;AAEA,YAAME,aAAa,GAAGR,IAAI,CAACS,IAAL,CAAUC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,SAA9B,CAAtB;;AAEA,UAAGK,aAAH,EAAkB;AAChBI,QAAAA,mBAAmB,CAAC;AAACT,UAAAA,SAAD;AAAYG,UAAAA;AAAZ,SAAD,CAAnB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACG,IAAT,CAAcD,MAAd,GAAuBA,MAAvB;AACAL,QAAAA,OAAO,CAACY,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcT,QAAQ,CAACG,IAAvB,CAAb,CAAP;AACD;AACF,KAbD,CAaE,MAAM,CACN;AACD;AACF,GAlBD;;AAoBA,QAAMO,aAAa,GAAIX,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMS,mBAAmB,GAAG,OAAO;AACjCT,IAAAA,SADiC;AAEjCG,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI;AACF;AACA,YAAMS,KAAc,GAAG,MAAMnB,GAAG,CAACS,GAAJ,CAAS,QAAT,CAA7B;AACA,YAAMW,cAAc,GAAGD,KAAK,CAACN,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,SAA/B,CAAvB;;AAEA,UAAGa,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEL,EAAnB,EAAuB;AACrB,cAAMM,aAAa,GAAGD,cAAc,CAACV,MAAf,GAAwBA,MAAxB,GAAiC,CAAjC,GAAqC,KAArC,GAA6C,IAAnE;;AACA,YAAIW,aAAJ,EAAmB;AACjB,gBAAMC,WAAW,GAAGlB,IAAI,CAACmB,GAAL,CAAST,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,SAAZ,GAAwB,EAC3D,GAAGO,IADwD;AAClDJ,YAAAA,MAAM,EAAEA;AAD0C,WAAxB,GAEjCI,IAFgB,CAApB;AAIAT,UAAAA,OAAO,CAACiB,WAAD,CAAP;AACD;AACF;AACF,KAfD,CAeE,MAAM,CACN;AACD;AACF,GAtBD;;AAwBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAElB,MAAAA,IAAF;AAAQE,MAAAA,UAAR;AAAoBY,MAAAA,aAApB;AAAmCF,MAAAA;AAAnC,KADT;AAAA,cAGGb;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAtEeD,Y;;KAAAA,Y;AAwEhB,OAAO,SAASsB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAG3B,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAOwB,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    // const storagedCart = Buscar dados do localStorage\n\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    \n    try {\n      // TODO\n      const response = await api.get(`/products/${productId}`);\n      const amount = response.data.amount + 1;\n\n      const productInCart = cart.find(item => item.id === productId);\n\n      if(productInCart) {\n        updateProductAmount({productId, amount});\n      } else {\n        response.data.amount = amount;\n        setCart(oldState => [...oldState, response.data])\n      }\n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n      const stock: Stock[] = await api.get(`/stock`);\n      const stockByProduct = stock.find(item => item.id === productId);\n\n      if(stockByProduct?.id) {\n        const updateValited = stockByProduct.amount - amount < 0 ? false : true;\n        if (updateValited) {\n          const updatedCart = cart.map(item => item.id === productId ? {\n            ...item, amount: amount\n          } : item);\n    \n          setCart(updatedCart);\n        }\n      }\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}