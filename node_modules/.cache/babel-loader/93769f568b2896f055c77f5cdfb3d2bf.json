{"ast":null,"code":"var _jsxFileName = \"/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // const storagedCart = Buscar dados do localStorage\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      // TODO\n      const response = await api.get(`/products/${productId}`);\n\n      if (response) {\n        if (cart.length === 0) {\n          setCart(response.data);\n        } else {\n          const productInCart = cart.find(item => item.id === productId);\n\n          if (productInCart) {\n            const updatedCart = cart.map(item => item.id === productId ? { ...item,\n              amount: item.amount + 1\n            } : item);\n            setCart(updatedCart);\n          } else {\n            setCart(oldState => [...oldState, response.data]);\n          }\n        }\n      }\n    } catch {// TODO\n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"YtbuN1V+lyXswE7SGXU88jdf5dY=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/everton/www/ignite/trilha_reactjs/Chapter_II/desafios/ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras-master/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","addProduct","productId","response","get","length","data","productInCart","find","item","id","updatedCart","map","amount","oldState","removeProduct","updateProductAmount","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD;AAEA;AACA;AACA;AAEA,WAAO,EAAP;AACD,GAR+B,CAAhC;;AAUA,QAAMO,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACF;AACA,YAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAS,aAAYF,SAAU,EAA/B,CAAvB;;AAEA,UAAGC,QAAH,EAAa;AACX,YAAGJ,IAAI,CAACM,MAAL,KAAgB,CAAnB,EAAsB;AACpBL,UAAAA,OAAO,CAACG,QAAQ,CAACG,IAAV,CAAP;AACD,SAFD,MAEO;AACL,gBAAMC,aAAa,GAAGR,IAAI,CAACS,IAAL,CAAUC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,SAA9B,CAAtB;;AAEA,cAAGK,aAAH,EAAkB;AAChB,kBAAMI,WAAW,GAAGZ,IAAI,CAACa,GAAL,CAASH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,SAAZ,GAAwB,EAC3D,GAAGO,IADwD;AAClDI,cAAAA,MAAM,EAAEJ,IAAI,CAACI,MAAL,GAAc;AAD4B,aAAxB,GAEjCJ,IAFgB,CAApB;AAIAT,YAAAA,OAAO,CAACW,WAAD,CAAP;AACD,WAND,MAMO;AACLX,YAAAA,OAAO,CAACc,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcX,QAAQ,CAACG,IAAvB,CAAb,CAAP;AACD;AACF;AACF;AACF,KArBD,CAqBE,MAAM,CACN;AACD;AACF,GAzBD;;AA2BA,QAAMS,aAAa,GAAIb,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMc,mBAAmB,GAAG,OAAO;AACjCd,IAAAA,SADiC;AAEjCW,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEd,MAAAA,IAAF;AAAQE,MAAAA,UAAR;AAAoBc,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGlB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhEeD,Y;;KAAAA,Y;AAkEhB,OAAO,SAASoB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAGzB,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAOsB,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    // const storagedCart = Buscar dados do localStorage\n\n    // if (storagedCart) {\n    //   return JSON.parse(storagedCart);\n    // }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      // TODO\n      const response = await api.get(`/products/${productId}`);\n\n      if(response) {\n        if(cart.length === 0) {\n          setCart(response.data)\n        } else {\n          const productInCart = cart.find(item => item.id === productId);\n\n          if(productInCart) {\n            const updatedCart = cart.map(item => item.id === productId ? {\n              ...item, amount: item.amount + 1\n            } : item);\n      \n            setCart(updatedCart);\n          } else {\n            setCart(oldState => [...oldState, response.data])\n          }\n        }\n      }\n    } catch {\n      // TODO\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}